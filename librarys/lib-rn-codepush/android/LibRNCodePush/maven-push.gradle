//支持将项目发布到maven仓库的插件
//apply plugin: 'maven'
apply plugin: 'maven-publish'
//支持对库文件数字签名的插件，可以通过签名知道文件的创建者，创建时间等信息
apply plugin: 'signing'

//声明变量记录上传Maven库地址
def repositoryUrl
//判断发到正式库还是snapshot库
if (isReleaseBuild()) {
    println 'Release Build'
    //上传Release私有仓库
    repositoryUrl = "http://nexus.medlinker.com/repository/local-android/"
} else {
    println 'Debug Build'
    //上传snapshot私有仓库
    repositoryUrl = "http://nexus.medlinker.com/repository/local-android-snapshot/"
//    repositoryUrl = "/Users/hmy/Downloads/med-maven/"
}

//从项目gradle.properties中读取Nexus服务器登录用户名
def getRepositoryUserName() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
//读取Nexus服务器登录密码
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}
//通过gradle.properties中VERSION_NAME常量判断是否是Release版本
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

//配置阶段要结束，项目评估完会走到这一步
afterEvaluate { project ->
    publishing.repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url repositoryUrl
            credentials {
                username = getRepositoryUserName()
                password = getRepositoryPassword()
            }
        }
    }

    publishing.publications {
        debug(MavenPublication) {
            groupId = POM_GROUP_ID
            artifactId = POM_ARTIFACT_ID
            version = VERSION_NAME


            afterEvaluate {
                artifact(tasks.getByName("bundleDebugAar"))
            }

            pom.withXml {
                //在pom.xml添加依赖关系
                def dependenciesNode = asNode().appendNode('dependencies')
                //拿到所有编译时的依赖
                def dependenciesList = []
                dependenciesList.addAll(configurations.debugRuntimeClasspath.allDependencies)
                dependenciesList.each {
                    if (null != it.group) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

            }
        }
    }

}